/**
 * Autogenerated by soa-sdk-toolkit
 *
 * DO NOT EDIT DIRECTLY
 */
package com.ctriposs.baiji.specific;

import com.ctriposs.baiji.convert.TypeConverter;
import com.ctriposs.baiji.exception.BaijiRuntimeException;
import com.ctriposs.baiji.schema.Schema;
import com.google.common.base.Objects;

import java.math.BigInteger;
import java.math.BigDecimal;
import java.net.URI;
import javax.xml.datatype.Duration;
@SuppressWarnings("all")
public class BaseType extends com.ctriposs.baiji.specific.SpecificRecordBase implements com.ctriposs.baiji.specific.SpecificRecord {

    private static final long serialVersionUID = 1L;

    public static final Schema SCHEMA$ = Schema.parse("{\"type\":\"record\",\"name\":\"BaseType\",\"namespace\":\"com.ctriposs.baiji.specific\",\"fields\":[{\"name\":\"anuUri1\",\"type\":[\"string\",\"null\"]},{\"name\":\"byte1\",\"type\":[\"int\",\"null\"]},{\"name\":\"decimal1\",\"type\":[\"string\",\"null\"]},{\"name\":\"float1\",\"type\":[\"float\",\"null\"]},{\"name\":\"short1\",\"type\":[\"int\",\"null\"]},{\"name\":\"unsignedByte1\",\"type\":[\"int\",\"null\"]},{\"name\":\"unsignedInt1\",\"type\":[\"long\",\"null\"]},{\"name\":\"unsignedLong1\",\"type\":[\"string\",\"null\"]},{\"name\":\"unsignedShort1\",\"type\":[\"int\",\"null\"]}, {\"name\":\"guid1\",\"type\":[\"string\",\"null\"]}, {\"name\":\"list1\",\"type\":[{\"type\":\"array\",\"items\":[\"string\", \"null\"]},\"null\"]},{\"name\":\"list2\",\"type\":[{\"type\":\"array\",\"items\":[\"string\", \"null\"]},\"null\"]}]}");

    @Override
    public Schema getSchema() { return SCHEMA$; }

    public BaseType(
            String anuUri1,
            Byte byte1,
            BigDecimal decimal1,
            Float float1,
            Short short1,
            Short unsignedByte1,
            Long unsignedInt1,
            BigInteger unsignedLong1,
            Integer unsignedShort1
    ) {
        this.anuUri1 = anuUri1;
        this.byte1 = byte1;
        this.decimal1 = decimal1;
        this.float1 = float1;
        this.short1 = short1;
        this.unsignedByte1 = unsignedByte1;
        this.unsignedInt1 = unsignedInt1;
        this.unsignedLong1 = unsignedLong1;
        this.unsignedShort1 = unsignedShort1;
    }

    public BaseType() {
    }

    private String anuUri1;

    private Byte byte1;

    private BigDecimal decimal1;


    private Float float1;

    private Short short1;

    private Short unsignedByte1;

    private Long unsignedInt1;

    private BigInteger unsignedLong1;

    private Integer unsignedShort1;


    public String getAnuUri1() {
        return this.anuUri1;
    }

    public void setAnuUri1(String anuUri1) {
        this.anuUri1 = anuUri1;
    }

    public byte getByte1() {
        return this.byte1;
    }

    public void setByte1(byte byte1) {
        this.byte1 = byte1;
    }

    public BigDecimal getDecimal1() {
        return this.decimal1;
    }

    public void setDecimal1(BigDecimal decimal1) {
        this.decimal1 = decimal1;
    }

    public Float getFloat1() {
        return this.float1;
    }

    public void setFloat1(Float float1) {
        this.float1 = float1;
    }

    public Short getShort1() {
        return this.short1;
    }

    public void setShort1(Short short1) {
        this.short1 = short1;
    }

    public Short getUnsignedByte1() {
        return this.unsignedByte1;
    }

    public void setUnsignedByte1(Short unsignedByte1) {
        this.unsignedByte1 = unsignedByte1;
    }

    public Long getUnsignedInt1() {
        return this.unsignedInt1;
    }

    public void setUnsignedInt1(Long unsignedInt1) {
        this.unsignedInt1 = unsignedInt1;
    }

    public BigInteger getUnsignedLong1() {
        return this.unsignedLong1;
    }

    public void setUnsignedLong1(BigInteger unsignedLong1) {
        this.unsignedLong1 = unsignedLong1;
    }

    public Integer getUnsignedShort1() {
        return this.unsignedShort1;
    }

    public void setUnsignedShort1(Integer unsignedShort1) {
        this.unsignedShort1 = unsignedShort1;
    }

    // Used by DatumWriter. Applications should not call.
    public Object get(int fieldPos) {
        try {
            switch(fieldPos) {
                case 0: return TypeConverter.convert(this.anuUri1, URI.class);
                case 1: return TypeConverter.convert(this.byte1, Integer.class);
                case 2: return TypeConverter.convert(this.decimal1, String.class);
                case 4: return (Float) this.float1;
                case 5: return TypeConverter.convert(this.short1, Integer.class);
                case 6: return TypeConverter.convert(this.unsignedByte1, Integer.class);
                case 7: return (Long) this.unsignedInt1;
                case 8: return TypeConverter.convert(this.unsignedLong1, String.class);
                case 9: return (Integer) this.unsignedShort1;
                default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in get()");
            }
        } catch (Exception e) {
            throw new BaijiRuntimeException("cast exception");
        }
    }

    // Used by DatumReader. Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int fieldPos, Object fieldValue) {
        switch(fieldPos) {
            case 0: this.anuUri1 = (String)fieldValue; break;
            case 1: this.byte1 = (byte)fieldValue; break;
            case 2: this.decimal1 = (BigDecimal)fieldValue; break;
            case 4: this.float1 = (Float)fieldValue; break;
            case 5: this.short1 = (Short)fieldValue; break;
            case 6: this.unsignedByte1 = (Short)fieldValue; break;
            case 7: this.unsignedInt1 = (Long)fieldValue; break;
            case 8: this.unsignedLong1 = (BigInteger)fieldValue; break;
            case 9: this.unsignedShort1 = (Integer)fieldValue; break;
            default: throw new BaijiRuntimeException("Bad index " + fieldPos + " in put()");
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;

        final BaseType other = (BaseType)obj;
        return
                Objects.equal(this.anuUri1, other.anuUri1) &&
                        Objects.equal(this.byte1, other.byte1) &&
                        Objects.equal(this.decimal1, other.decimal1) &&
                        Objects.equal(this.float1, other.float1) &&
                        Objects.equal(this.short1, other.short1) &&
                        Objects.equal(this.unsignedByte1, other.unsignedByte1) &&
                        Objects.equal(this.unsignedInt1, other.unsignedInt1) &&
                        Objects.equal(this.unsignedLong1, other.unsignedLong1) &&
                        Objects.equal(this.unsignedShort1, other.unsignedShort1);
    }

    @Override
    public int hashCode() {
        int result = 1;

        result = 31 * result + (this.anuUri1 == null ? 0 : this.anuUri1.hashCode());
        result = 31 * result + (this.byte1 == null ? 0 : this.byte1.hashCode());
        result = 31 * result + (this.decimal1 == null ? 0 : this.decimal1.hashCode());
        result = 31 * result + (this.float1 == null ? 0 : this.float1.hashCode());
        result = 31 * result + (this.short1 == null ? 0 : this.short1.hashCode());
        result = 31 * result + (this.unsignedByte1 == null ? 0 : this.unsignedByte1.hashCode());
        result = 31 * result + (this.unsignedInt1 == null ? 0 : this.unsignedInt1.hashCode());
        result = 31 * result + (this.unsignedLong1 == null ? 0 : this.unsignedLong1.hashCode());
        result = 31 * result + (this.unsignedShort1 == null ? 0 : this.unsignedShort1.hashCode());

        return result;
    }

    @Override
    public String toString() {
        return Objects.toStringHelper(this)
                .add("anuUri1", anuUri1)
                .add("byte1", byte1)
                .add("decimal1", decimal1)
                .add("float1", float1)
                .add("short1", short1)
                .add("unsignedByte1", unsignedByte1)
                .add("unsignedInt1", unsignedInt1)
                .add("unsignedLong1", unsignedLong1)
                .add("unsignedShort1", unsignedShort1)
                .toString();
    }

}